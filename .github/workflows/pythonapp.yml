# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # so that this github workflow can be triggered manually
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: fix imagemagick's policy to allow to generate sample pdf files
      run: |
        identify -version
        sudo cat /etc/ImageMagick-6/policy.xml
        identify -list policy || true
        gs --version || true
        sudo sed -E -i 's#<policy domain="coder" rights="none" pattern="PDF" />#<policy domain="coder" rights="read|write" pattern="PDF" />#g' /etc/ImageMagick-6/policy.xml
        sudo sed -E -i 's#<policy domain="resource" name="memory" value="[0-9TGMKiB]+"/>#<policy domain="resource" name="memory" value="2048MiB"/>#g' /etc/ImageMagick-6/policy.xml
        sudo sed -E -i 's#<policy domain="resource" name="disk" value="[0-9TGMKiB]+"/>#<policy domain="resource" name="disk" value="10GiB"/>#g' /etc/ImageMagick-6/policy.xml
        sudo cat /etc/ImageMagick-6/policy.xml
        identify -list policy || true
    - name: Install dependencies
      # texlive-latex-base : pdflatex, hyperref
      # texlive-latex-recommended : setspace
      # texlive-latex-extra : textpos
      # texlive-pictures : tikz
      run: |
        sudo apt install ghostscript
        sudo apt install texlive-latex-base  
        sudo apt install texlive-latex-recommended  
        sudo apt install texlive-latex-extra  
        sudo apt install texlive-pictures  
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     set PYTHONPATH=src
    #     pytest
    - name: Test with make
      run: |
        echo "Log level: $LOGLEVEL (this environment variable is unused yet)"
        make clean; make test
      env:
        LOGLEVEL: ${{ inputs.logLevel }}